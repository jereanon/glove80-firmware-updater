name: Build and release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build on ${{ matrix.target }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - runs-on: windows-latest
            target: x86_64-pc-windows-gnu
          - runs-on: macos-latest
            target: x86_64-apple-darwin
          - runs-on: macos-latest
            target: aarch64-apple-darwin
          - runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Format code
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Get version
        id: get_version
        run: echo "::set-output name=version::$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "glove80-firmware-updater") | .version')"

      - name: Create tag
        id: create_tag
        uses: actions/github-script@v5
        with:
          script: |
            const { repo: { owner, repo } } = context;
            const tag = `v${"${{ steps.get_version.outputs.version }}"}; // use the version from Cargo.toml
            const { data: createdTag } = await github.rest.git.createTag({
              owner,
              repo,
              tag,
              message: `Release ${tag}`,
              object: context.sha,
              type: 'commit',
            });
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/tags/${tag}`,
              sha: createdTag.sha,
            });
            return tag;
          result-encoding: string

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/glove80-firmware-updater

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create and upload release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.result }}
          files: ./binary-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
